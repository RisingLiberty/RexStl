// ============================================
//
// REX - STANDARD LIBRARY IMPLEMENTATION
//
// Author: Nick De Breuck
// Twitter: @nick_debreuck
//
// File: algorithm.h
// Copyright (c) Nick De Breuck 2022
//
// ============================================

#pragma once

// Standard algorithms
#include "rex_std/internal/algorithm/adjacent_find.h"
#include "rex_std/internal/algorithm/all_of.h"
#include "rex_std/internal/algorithm/any_of.h"
#include "rex_std/internal/algorithm/binary_search.h"
#include "rex_std/internal/algorithm/bsearch.h"
#include "rex_std/internal/algorithm/clamp.h"
#include "rex_std/internal/algorithm/construct_at.h"
#include "rex_std/internal/algorithm/copy.h"
#include "rex_std/internal/algorithm/copy_backward.h"
#include "rex_std/internal/algorithm/copy_if.h"
#include "rex_std/internal/algorithm/copy_n.h"
#include "rex_std/internal/algorithm/count.h"
#include "rex_std/internal/algorithm/count_if.h"
#include "rex_std/internal/algorithm/equal.h"
#include "rex_std/internal/algorithm/equal_range.h"
#include "rex_std/internal/algorithm/fill.h"
#include "rex_std/internal/algorithm/fill_n.h"
#include "rex_std/internal/algorithm/find.h"
#include "rex_std/internal/algorithm/find_end.h"
#include "rex_std/internal/algorithm/find_first_of.h"
#include "rex_std/internal/algorithm/find_if.h"
#include "rex_std/internal/algorithm/find_if_not.h"
#include "rex_std/internal/algorithm/for_each.h"
#include "rex_std/internal/algorithm/for_each_n.h"
#include "rex_std/internal/algorithm/generate.h"
#include "rex_std/internal/algorithm/generate_n.h"
#include "rex_std/internal/algorithm/includes.h"
#include "rex_std/internal/algorithm/inplace_merge.h"
#include "rex_std/internal/algorithm/is_heap.h"
#include "rex_std/internal/algorithm/is_heap_until.h"
#include "rex_std/internal/algorithm/is_partitioned.h"
#include "rex_std/internal/algorithm/is_permutation.h"
#include "rex_std/internal/algorithm/is_sorted.h"
#include "rex_std/internal/algorithm/is_sorted_until.h"
#include "rex_std/internal/algorithm/iter_swap.h"
#include "rex_std/internal/algorithm/lexicographical_compare.h"
#include "rex_std/internal/algorithm/lexicographical_compare_three_way.h"
#include "rex_std/internal/algorithm/lower_bound.h"
#include "rex_std/internal/algorithm/make_heap.h"
#include "rex_std/internal/algorithm/max.h"
#include "rex_std/internal/algorithm/max_element.h"
#include "rex_std/internal/algorithm/memcmp.h"
#include "rex_std/internal/algorithm/merge.h"
#include "rex_std/internal/algorithm/min.h"
#include "rex_std/internal/algorithm/min_element.h"
#include "rex_std/internal/algorithm/minmax.h"
#include "rex_std/internal/algorithm/minmax_element.h"
#include "rex_std/internal/algorithm/mismatch.h"
#include "rex_std/internal/algorithm/move.h"
#include "rex_std/internal/algorithm/move_backward.h"
#include "rex_std/internal/algorithm/next_permutation.h"
#include "rex_std/internal/algorithm/none_of.h"
#include "rex_std/internal/algorithm/nth_element.h"
#include "rex_std/internal/algorithm/partial_sort.h"
#include "rex_std/internal/algorithm/partial_sort_copy.h"
#include "rex_std/internal/algorithm/partition.h"
#include "rex_std/internal/algorithm/partition_copy.h"
#include "rex_std/internal/algorithm/partition_point.h"
#include "rex_std/internal/algorithm/pop_heap.h"
#include "rex_std/internal/algorithm/prev_permutation.h"
#include "rex_std/internal/algorithm/push_heap.h"
#include "rex_std/internal/algorithm/qsort.h"
#include "rex_std/internal/algorithm/remove.h"
#include "rex_std/internal/algorithm/remove_copy.h"
#include "rex_std/internal/algorithm/remove_copy_if.h"
#include "rex_std/internal/algorithm/remove_if.h"
#include "rex_std/internal/algorithm/replace.h"
#include "rex_std/internal/algorithm/replace_copy.h"
#include "rex_std/internal/algorithm/replace_if.h"
#include "rex_std/internal/algorithm/reverse.h"
#include "rex_std/internal/algorithm/reverse_copy.h"
#include "rex_std/internal/algorithm/rotate.h"
#include "rex_std/internal/algorithm/rotate_copy.h"
#include "rex_std/internal/algorithm/sample.h"
#include "rex_std/internal/algorithm/search.h"
#include "rex_std/internal/algorithm/search_n.h"
#include "rex_std/internal/algorithm/set_difference.h"
#include "rex_std/internal/algorithm/set_intersection.h"
#include "rex_std/internal/algorithm/set_symmetric_difference.h"
#include "rex_std/internal/algorithm/set_union.h"
#include "rex_std/internal/algorithm/shift_left.h"
#include "rex_std/internal/algorithm/shift_right.h"
#include "rex_std/internal/algorithm/shuffle.h"
#include "rex_std/internal/algorithm/sort.h"
#include "rex_std/internal/algorithm/sort_heap.h"
#include "rex_std/internal/algorithm/stable_partition.h"
#include "rex_std/internal/algorithm/stable_sort.h"
#include "rex_std/internal/algorithm/swap_ranges.h"
#include "rex_std/internal/algorithm/transform.h"
#include "rex_std/internal/algorithm/unique.h"
#include "rex_std/internal/algorithm/unique_copy.h"
#include "rex_std/internal/algorithm/upper_bound.h"

// Bonus algorithms
#include "rex_std/bonus/algorithm/clamp_max.h"
#include "rex_std/bonus/algorithm/clamp_min.h"
#include "rex_std/bonus/algorithm/count.h"
#include "rex_std/bonus/algorithm/transform_if.h"