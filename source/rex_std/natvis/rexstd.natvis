<?xml version="1.0" encoding="utf-8"?> 
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="rsl::v1::stack_string&lt;*&gt;">
		<Intrinsic Name="length" Expression="m_null_terminator_offset" />
		<Intrinsic Name="max_size" Expression="$T2" />
		<Intrinsic Name="data" Expression="m_data.m_data" />
		<DisplayString Condition="m_null_terminator_offset == 0xcccccccc">Uninitialized</DisplayString>
		<DisplayString>{data(), na}</DisplayString>
		<StringView>data(), na</StringView>
		<Expand>
			<Item Name="[length]">length()</Item>
			<Item Name="[max size]">max_size()</Item>
			<Item Name="[data]">data()</Item>
			<ArrayItems>
				<Size>length()</Size>
				<ValuePointer>m_data.m_data</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
  <Type Name="rsl::v1::internal::compressed_pair_impl&lt;*&gt;">
    <DisplayString Condition="($T3) == 0" Optional="true">first = {m_first} | second = {m_second}</DisplayString>
    <DisplayString Condition="($T3) == 1" Optional="true">first = empty | second = {m_second}</DisplayString>
    <DisplayString Condition="($T3) == 2" Optional="true">first = {m_first} | second = empty</DisplayString>
    <DisplayString Condition="($T3) == 3" Optional="true">empty</DisplayString>
    <DisplayString Condition="($T3) == 4" Optional="true">first = {m_first} | second = {m_second}</DisplayString>
    <DisplayString Condition="($T3) == 5" Optional="true">empty</DisplayString>
    <Expand>
      <Item Name="[first]" Condition="$T3 == 0" Optional="true">m_first</Item>
      <Item Name="[first]" Condition="$T3 == 1" Optional="true">($T1)*this</Item>
      <Item Name="[first]" Condition="$T3 == 2" Optional="true">m_first</Item>
      <Item Name="[first]" Condition="$T3 == 3" Optional="true">($T1)*this</Item>
      <Item Name="[first]" Condition="$T3 == 4" Optional="true">m_first</Item>
      <Item Name="[first]" Condition="$T3 == 5" Optional="true">($T1)*this</Item>
      
      <Item Name="[second]" Condition="$T3 == 0" Optional="true">m_second</Item>
      <Item Name="[second]" Condition="$T3 == 1" Optional="true">m_second</Item>
      <Item Name="[second]" Condition="$T3 == 2" Optional="true">($T2)*this</Item>
      <Item Name="[second]" Condition="$T3 == 3" Optional="true">m_second</Item>
      <Item Name="[second]" Condition="$T3 == 4" Optional="true">m_second</Item>
      <Item Name="[second]" Condition="$T3 == 5" Optional="true">($T2)*this</Item>
    </Expand>
  </Type>
  <Type Name="rsl::v1::basic_string&lt;*&gt;">
    <Intrinsic Name="length" Expression="m_end - m_begin" />
    <Intrinsic Name="capacity" Expression="m_cp_last_and_allocator.m_first-m_begin" />
    <Intrinsic Name="data" Expression="m_begin" />
    <DisplayString Condition="m_begin == 0xcccccccc">Uninitialized</DisplayString>
    <DisplayString>{data(), na}</DisplayString>
    <StringView>data(), na</StringView>
    <Expand>
      <Item Name="[length]">length()</Item>
      <Item Name="[capacity]">capacity()</Item>
      <Item Name="[data]">data()</Item>
      <Item Name="[sso active]">m_begin == m_sso_buffer.m_data.m_data</Item>
      <ArrayItems>
        <Size>length()</Size>
        <ValuePointer>m_begin</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="rsl::v1::unique_ptr&lt;*&gt;">
    <DisplayString Condition="m_cp_ptr_and_deleter.m_first == 0xcccccccc">Uninitialized</DisplayString>
    <DisplayString Condition="m_cp_ptr_and_deleter.m_first == 0">Null</DisplayString>
    <DisplayString>{m_cp_ptr_and_deleter.m_first}</DisplayString>
		<Expand>
			<Item Name="[ptr]">m_cp_ptr_and_deleter.m_first</Item>
		</Expand>
  </Type>
  <Type Name="rsl::v1::unique_array&lt;*&gt;">
    <DisplayString Condition="m_ptr == 0xcccccccc">Uninitialized</DisplayString>
    <DisplayString>{m_ptr}</DisplayString>
    <Expand>
      <Item Name="[ptr]">m_ptr</Item>
      <Item Name="[length]">m_count</Item>
      <ArrayItems>
        <Size>m_count</Size>
        <ValuePointer>m_ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="rsl::v1::vector&lt;*&gt;">
    <Intrinsic Name="size" Expression="m_end-m_begin" />
    <Intrinsic Name="capacity" Expression="m_cp_last_and_allocator.m_first-m_begin" />
    <DisplayString>size = {size()} | cap = {capacity()}</DisplayString>
    <Expand>
      <Item Name="[size]">size()</Item>
      <Item Name="[capacity]">capacity()</Item>
      <ArrayItems>
        <Size>size()</Size>
        <ValuePointer>m_begin</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="rsl::v1::hashtable&lt;*&gt;">
    <Intrinsic Name="size" Expression="m_cp_bucket_idx_finder_and_element_count.m_second" />
    <Intrinsic Name="buckets" Expression="m_cp_key_hash_and_bucket_count.m_second" />
    <Intrinsic Name="bucket_array" Expression="m_cp_key_equal_and_bucket_array.m_second" />
    <DisplayString>size = {size()}</DisplayString>
    <Expand>
      <Item Name="[size]">size()</Item>
      <Item Name="[buckets]">buckets()</Item>
      <ArrayItems>
        <Size>buckets()</Size>
        <ValuePointer>bucket_array()</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="rsl::v1::hash_node&lt;*&gt;">
	<DisplayString Condition="this != 0 &amp;&amp; next != 0"> {value}, {*next}</DisplayString>
	<DisplayString Condition="this != 0 &amp;&amp; next == 0"> {value}</DisplayString>
	<DisplayString Condition="this == 0"></DisplayString>
	<Expand>
		<LinkedListItems>
            <HeadPointer>this</HeadPointer>
            <NextPointer>next</NextPointer>
            <ValueNode>value</ValueNode>
        </LinkedListItems>
	</Expand>
</Type>
  <Type Name="rsl::v1::array&lt;*&gt;">
    <Intrinsic Name="size" Expression="$T2" />
    <Intrinsic Name="data" Expression="m_data" />
    <DisplayString>{{ size={size()} }}</DisplayString>
    <Expand>
      <Item Name="[size]">size()</Item>
      <ArrayItems>
        <Size>$T2</Size>
        <ValuePointer>m_data</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="rsl::v1::basic_string_view&lt;*&gt;">
    <Intrinsic Name="size" Expression="m_length" />
    <Intrinsic Name="data" Expression="m_data" />
    <DisplayString>{m_data,[m_length]}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">size()</Item>
      <ArrayItems>
        <Size>size()</Size>
        <ValuePointer>data()</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

<Type Name="rsl::v1::key_value&lt;*&gt;">
	<DisplayString>({key}, {value})</DisplayString>
    <Expand>
        <Item Name="key">key</Item>
        <Item Name="value">value</Item>
    </Expand>
</Type>

	<Type Name="rsl::v1::set&lt;*&gt;">
		<AlternativeType Name="rsl::v1::multiset&lt;*&gt;" />
		<DisplayString Condition="mnSize == 0">
			[0] {{}}
		</DisplayString>
		<DisplayString Condition="mnSize == 1">
			[1]
			{{
			{((rsl::internal::RedBlackTreeNode&lt;$T1&gt;*)m_anchor.left_node)-&gt;m_value}
			}}
		</DisplayString>
		<DisplayString Condition="mnSize &gt; 1">
			[{mnSize}]
			{{
			{((rsl::internal::RedBlackTreeNode&lt;$T1&gt;*)m_anchor.left_node)-&gt;m_value},
			...
			}}
		</DisplayString>
		<Expand>
			<Item Name="[size]">mnSize</Item>
			<TreeItems>
				<Size>mnSize</Size>
				<HeadPointer>m_anchor.parent_node</HeadPointer>
				<LeftPointer>left_node</LeftPointer>
				<RightPointer>right_node</RightPointer>
				<ValueNode>((rsl::internal::RedBlackTreeNode&lt;$T1&gt;*)this)-&gt;m_value</ValueNode>
			</TreeItems>
		</Expand>
	</Type>

	<Type Name="rsl::v1::RedBlackTree&lt;*,*&gt;">
	<Intrinsic Name="size" Expression="m_cp_size_and_allocator.m_first" />
		<DisplayString Condition="m_cp_size_and_allocator.m_first &lt; 0">
			Uninitialized
		</DisplayString>
		<DisplayString Condition="m_cp_size_and_allocator.m_first == 0">
			[0] {{}}
		</DisplayString>
		<DisplayString Condition="m_cp_size_and_allocator.m_first == 1">
			[1]
			{{
			{((rsl::v1::internal::RedBlackTreeNode&lt;$T2&gt;*)m_anchor.left_node)-&gt;value}
			}}
		</DisplayString>
		<DisplayString Condition="m_cp_size_and_allocator.m_first &gt; 1">
			[{size()}]
			{{
			{((rsl::v1::internal::RedBlackTreeNode&lt;$T2&gt;*)m_anchor.left_node)-&gt;value},
			...
			}}
		</DisplayString>
		<Expand>
			<Item Name="[size]">size()</Item>
			<TreeItems>
				<Size>size()</Size>
				<HeadPointer>m_anchor.parent_node</HeadPointer>
				<LeftPointer>left_node</LeftPointer>
				<RightPointer>right_node</RightPointer>
				<ValueNode>((rsl::v1::internal::RedBlackTreeNode&lt;$T2&gt;*)this)-&gt;value</ValueNode>
			</TreeItems>
		</Expand>
	</Type>

	<Type Name="rsl::v1::internal::RedBlackTreeNode&lt;*&gt;">
		<DisplayString>{value}</DisplayString>
		<Expand>
			<Item Name="Value">value</Item>
			<Synthetic Name="NOTE!">
				<DisplayString>It is possible to expand parents that do not exist.</DisplayString>
			</Synthetic>
			<!-- <Item Name="Parent">*(rsl::v1::internal::RedBlackTreeNode&lt;$T1&gt;*)(parent_node.value &amp; (~uintptr(1)))</Item> -->
			<Item Name="Left">*(rsl::v1::internal::RedBlackTreeNode&lt;$T1&gt;*)left_node</Item>
			<Item Name="Right">*(rsl::v1::internal::RedBlackTreeNode&lt;$T1&gt;*)right_node</Item>
		</Expand>
	</Type>

	<Type Name="rsl::RedBlackTreeIterator&lt;*&gt;">
		<DisplayString>{*m_node}</DisplayString>
		<Expand>
			<ExpandedItem>m_node</ExpandedItem>
		</Expand>
	</Type>

	<Type Name="rsl::v1::hashtable_iterator_base&lt;*&gt;">
		<DisplayString>{m_node-&gt;m_value}</DisplayString>
		<Expand>
			<ExpandedItem>m_node-&gt;m_value</ExpandedItem>
		</Expand>
	</Type>




</AutoVisualizer>